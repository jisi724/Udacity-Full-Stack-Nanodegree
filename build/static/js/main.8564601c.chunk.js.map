{"version":3,"sources":["assets/icon.png","assets/toggle.png","assets/loopup.png","components/MapPopup.js","components/Map.js","components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MapPopup","data","this","props","restaurant","backgroundStyle","backgroundImage","image","react_default","a","createElement","className","style","name","rate","address","cost","href","menuUrl","target","rel","introUrl","Component","Map","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_updateViewport","viewport","setState","_selectChangeHandler","e","onSelectChange","_renderMarkers","items","filter","i","toLowerCase","indexOf","inputFilter","map","item","index","location","esm","latitude","parseFloat","longitude","key","src","pin","alt","onClick","R","res_id","_renderPopupWindow","selectItem","currentPopup","forEach","average_cost_for_two","featured_image","menu_url","url","user_rating","aggregate_rating","closeOnClick","onClose","components_MapPopup","state","width","height","zoom","assign","mapboxApiAccessToken","mapStyle","onViewportChange","Menu","_renderItemList","finalList","length","resturant","ifSelect","_filterChangeHandler","onFilterChange","value","showMenu","_this2","transform","type","placeholder","onChange","lookup","toggle","App","_updateFilterItem","_updateSelectItem","fetch","headers","Headers","user-key","Accept","then","res","json","result","restaurants","error","alert","id","components_Menu","components_Map","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8564601c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.3cd1facd.png\";","module.exports = __webpack_public_path__ + \"static/media/toggle.30ed7761.png\";","module.exports = __webpack_public_path__ + \"static/media/loopup.92c5fcf5.png\";","import React, { Component } from 'react';\n\nclass MapPopup extends Component {\n  render() {\n    const data = this.props.restaurant;\n\n    const backgroundStyle = {\n      backgroundImage: 'url(' + data.image + ')'\n    }\n\n\n    return (\n      <div className=\"map-popup\">\n        <div className=\"map-popup-header\" style={backgroundStyle}>\n          <div>\n            <h4>{data.name}</h4>\n            <h5>{data.rate} / 5</h5>\n          </div>\n        </div>\n        <div className=\"map-popup-info\">\n          <div>\n            <h5 className=\"label\">Address: </h5>\n            <h5 className=\"value\">{data.address}</h5>\n          </div>\n          <div>\n            <h5 className=\"label\">Average Cost: </h5>\n            <h5 className=\"value\">${data.cost}</h5>\n          </div>\n          <div>\n            <a href={data.menuUrl} target=\"_blank\" rel=\"noopener noreferrer\">Check Menu</a>\n            <a href={data.introUrl} target=\"_blank\" rel=\"noopener noreferrer\">Check Intro</a>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default MapPopup;","import React, {Component} from 'react';\nimport MapGL, {Marker, Popup, NavigationControl} from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport MapPopup from './MapPopup';\nimport pin from '../assets/icon.png';\n\nconst MAPBOX_API_KEY = \"pk.eyJ1IjoiamlzaTcyNCIsImEiOiJjaW83bmRjODEwMnBodmdrcWlmc2M2NTF1In0.diflnHFyCHTX4yUOeuZOlg\";\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: {\n        width: '100%',\n        height: '100vh',\n        latitude: 49.2727,\n        longitude: -123.1107,\n        zoom: 12\n      }\n    }\n  }\n\n  _updateViewport = (viewport) => {\n    this.setState({viewport});\n  }\n\n  _selectChangeHandler = (e) => {\n    this.props.onSelectChange(e);\n  }\n\n  _renderMarkers = () => {\n    const markers = this.props.items.filter((i) => {\n      return i.restaurant.name.toLowerCase().indexOf(this.props.inputFilter.toLowerCase()) !== -1;\n    }).map((item, index) => {\n      const location = item.restaurant.location\n      return (\n        <Marker \n          latitude={parseFloat(location.latitude)} \n          longitude={parseFloat(location.longitude)}\n          key={index}>\n          <img src={pin} className='map-marker' alt='blue marker'\n               onClick={() => this._selectChangeHandler(item.restaurant.R.res_id)}/>\n        </Marker>\n      )\n    })\n    return markers;\n  }\n\n  _renderPopupWindow = () => {\n    if (this.props.selectItem) {\n      let currentPopup = null\n      this.props.items.forEach((item) => {\n        if (item.restaurant.R.res_id === this.props.selectItem) {\n          const restaurant = item.restaurant\n          currentPopup = {\n            latitude: parseFloat(restaurant.location.latitude),\n            longitude: parseFloat(restaurant.location.longitude),\n            name: restaurant.name,\n            cost: parseFloat(restaurant.average_cost_for_two)/2,\n            image: restaurant.featured_image,\n            address: restaurant.location.address,\n            menuUrl: restaurant.menu_url,\n            introUrl: restaurant.url,\n            rate: restaurant.user_rating.aggregate_rating\n          }\n        }\n      })\n      return (\n        <Popup\n        longitude={currentPopup.longitude}\n        latitude={currentPopup.latitude}\n        closeOnClick={false}\n        onClose={() => this._selectChangeHandler(null)}>\n          <MapPopup restaurant={currentPopup}></MapPopup>\n        </Popup>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <section className='map'>\n        <MapGL\n          {...this.state.viewport}\n          mapboxApiAccessToken={MAPBOX_API_KEY}\n          mapStyle=\"mapbox://styles/mapbox/basic-v9\"\n          onViewportChange={this._updateViewport}>\n\n          <div className=\"map-nav\">\n            <NavigationControl onViewportChange={this._updateViewport} />\n          </div>\n\n          {this._renderMarkers()}\n\n          {this._renderPopupWindow()}\n\n        </MapGL>\n      </section>\n    )\n  }\n}\n\nexport default Map","import React, { Component } from 'react';\nimport toggle from '../assets/toggle.png';\nimport lookup from '../assets/loopup.png';\n\nclass Menu extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showMenu: true,\n    };\n  }\n\n  _renderItemList = () => {\n    const finalList = this.props.items.filter((i) => {\n      return i.restaurant.name.toLowerCase().indexOf(this.props.inputFilter.toLowerCase()) !== -1;\n    })\n    if (finalList.length > 0) {\n      return finalList.map((item, index) => {\n        const resturant = item.restaurant;\n        const ifSelect = this.props.selectItem === resturant.R.res_id;\n        return (\n          <div className={\"menu-list-item \" + (ifSelect ? \"selected\" : \"\")} key={index} \n               onClick={() => this._selectChangeHandler(resturant.R.res_id)}>\n            <h5>{resturant.name}</h5>\n          </div>\n        )\n      })\n    } else {\n      return (\n        <h5>No result.</h5>\n      )\n    }\n\n  }\n\n  _filterChangeHandler = (e) => {\n    this.props.onFilterChange(e.target.value);\n  }\n\n  _selectChangeHandler = (e) => {\n    this.props.onSelectChange(e);\n  }\n\n  render() {\n    return (\n      <section className=\"menu\" style={{ transform: this.state.showMenu ? 'translateX(0)' : 'translateX(-265px)' }}>\n        <div className=\"menu-heading\">\n          <h2>Neighborhood App</h2>\n          <h4>Find the best SUSHI in Vancouver!</h4>\n        </div>\n\n        <div className=\"menu-filter\">\n          <input type=\"text\" placeholder=\"Input Filter\" \n                 value={this.state.inputFilter} onChange={this._filterChangeHandler}></input>\n          <img src={lookup} alt=\"a search icon\"></img>\n        </div>\n\n        <div className=\"menu-list\">\n          {this._renderItemList()}\n        </div>\n\n        <div className='menu-toggle' onClick={() => this.setState({showMenu: !this.state.showMenu})}>\n          <img src={toggle} alt=\"Three lines menu icon\"></img>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Menu;","import React, { Component } from 'react';\nimport Map from './components/Map';\nimport Menu from './components/Menu';\n\nconst ZOMATO_API_KEY = 'b95ab0780f238e8875f0686727f6ef80';\nconst ZOMATO_API_URL = 'https://developers.zomato.com/api/v2.1/search?q=sushi&count=50&lat=49.2501&lon=-123.0824&radius=100000';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      inputFilter: '',\n      selectItem: null\n    }\n  }\n\n  /**\n   * Fetch restaurant data from zomato.com\n   */\n  componentDidMount() {\n    fetch(ZOMATO_API_URL, { \n      headers: new Headers({\n        'user-key': ZOMATO_API_KEY,\n        'Accept': 'application/json'\n      })\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            items: result.restaurants,\n          })\n        },\n        (error) => {\n          alert(\"There's something wrong to fetch data from Zomato.\\nCheck your internet connection or contact your admin.\")\n        }\n      )\n  }\n\n  _updateFilterItem = (value) => {\n    this.setState({\n      inputFilter: value,\n      selectItem: null\n    });\n  }\n\n  _updateSelectItem = (value) => {\n    this.setState({\n      selectItem: value\n    });\n  }\n\n  render() {\n    return (\n      <main id=\"app\">\n        <Menu {...this.state} \n          onFilterChange={this._updateFilterItem}\n          onSelectChange={this._updateSelectItem}></Menu>\n        <Map {...this.state}\n          onSelectChange={this._updateSelectItem}></Map>\n      </main>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}